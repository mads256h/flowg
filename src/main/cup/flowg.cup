package org.flowsoft.flowg;

import java.util.ArrayList;
import java_cup.runtime.*;
import org.flowsoft.flowg.nodes.*;

terminal INVALID;

terminal TypeNode TYPE;

terminal IdentifierNode IDENTIFIER;

terminal NumberLiteralNode NUMBER_LITERAL;
terminal BooleanLiteralNode BOOLEAN_LITERAL;

terminal MOVE;

terminal L_PAREN;
terminal R_PAREN;

terminal ASSIGNMENT;
terminal SEMICOLON;
terminal COMMA;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;

non terminal StatementListNode program;
non terminal ArrayList<StatementNode> stmt_list;
non terminal StatementNode stmt;
non terminal DeclarationNode decl;
non terminal MoveNode move;
non terminal ActualParameterListNode a_param_list;
non terminal ArrayList<ExpressionNode> a_param_list_impl;
non terminal ExpressionNode expr;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

start with program;

program ::= stmt_list:l
            {: RESULT = new StatementListNode(l); :};

stmt_list ::= stmt_list:l stmt:s SEMICOLON
            {: l.add(s); RESULT = l; :}
            |
            stmt:s SEMICOLON
            {: var list = new ArrayList<StatementNode>(); list.add(s); RESULT = list; :};

stmt ::= decl:d
        {: RESULT = d; :}
        |
        move:m
        {: RESULT = m; :};

decl ::= TYPE:t IDENTIFIER:i ASSIGNMENT expr:e
        {: RESULT = new DeclarationNode(t, i, e); :};

move ::= MOVE L_PAREN a_param_list:p R_PAREN
        {: RESULT = new MoveNode(p); :};

a_param_list ::= a_param_list_impl:l
        {: RESULT = new ActualParameterListNode(l); :};

a_param_list_impl ::= a_param_list_impl:l COMMA expr:e
        {: l.add(e); RESULT = l; :}
        |
        expr:e
        {: var l = new ArrayList<ExpressionNode>(); l.add(e); RESULT = l; :};

expr ::= NUMBER_LITERAL:n
        {: RESULT = n; :}
        | BOOLEAN_LITERAL:b
        {: RESULT = b; :}
        | expr:e1 PLUS expr:e2
        {: RESULT = new PlusExpressionNode(e1, e2); :}
        | expr:e1 MINUS expr:e2
        {: RESULT = new MinusExpressionNode(e1, e2); :}
        | expr:e1 TIMES expr:e2
        {: RESULT = new TimesExpressionNode(e1, e2); :}
        | expr:e1 DIVIDE expr:e2
        {: RESULT = new DivideExpressionNode(e1, e2); :}
        | IDENTIFIER:i
        {: RESULT = new IdentifierExpressionNode(i); :}
        ;